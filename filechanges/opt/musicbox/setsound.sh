#!/bin/bash
#
# MusicBox Sound configuration script
#

. /opt/musicbox/utils.sh

function enumerate_sound_cards()
{
    # Remove unwanted characters from argument.
    [ -z $OUTPUT ] && return 1 || NAMED=$(echo $OUTPUT | tr -d "[:punct:]")
    while read -r line
    do
        ## Dac
        #card 0: sndrpihifiberry [snd_rpi_hifiberry_dac], device 0: HifiBerry DAC HiFi pcm5102a-hifi-0 []
        ## Digi
        #card 2: sndrpihifiber_1 [snd_rpi_hifiberry_digi], device 0: HifiBerry Digi HiFi wm8804-spdif-0 []
        ## Dac+
        #card 1: sndrpihifiber_1 [snd_rpi_hifiberry_dacplus], device 0: HiFiBerry DAC+ HiFi pcm512x-hifi-0 []
        #IQaudIO
        #card 1: sndrpiiqaudioda [snd_rpi_iqaudio_dac], device 0: IQaudIO DAC HiFi pcm512x-hifi-0 []
        #card 1: IQaudIODAC [IQaudIODAC], device 0: IQaudIO DAC HiFi pcm512x-hifi-0 []
        ## Wolfson
        #Card 0: sndrpiwsp [snd_rpi_wsp], device 0: WM5102 AiFi wm5102-aif1-0 []
        ## Onboard
        #card 0: ALSA [bcm2835 ALSA], device 0: bcm2835 ALSA [bcm2835 ALSA]
        #card 0: ALSA [bcm2835 ALSA], device 1: bcm2835 ALSA [bcm2835 IEC958/HDMI]
        ## USB
        #card 2: AUDIO [USB  AUDIO], device 0: USB Audio [USB Audio]
        #card 2: DAC [USB Audio DAC], device 0: USB Audio [USB Audio]
        #card 2: CODEC [USB Audio CODEC], device 0: USB Audio [USB Audio]

        # Remove unwanted characters, make lowercase and split on whitespace.
        line=$(echo $line | tr "[:upper:]" "[:lower:]" | tr -d "[:punct:]")
        dev=($(echo $line))
        card_num=${dev[1]}
        name=${dev[3]}
        if [[ $name == "bcm2835" ]]; then
            INT_CARD=$card_num
            if [[ $line =~ "hdmi" ]] && tvservice -s | grep -q HDMI; then
                echo "  Found internal device: card$INT_CARD (HDMI)"
                HDMI_CARD=$card_num
            elif [[ ! $line =~ "hdmi" ]]; then
                echo "  Found internal device: card$INT_CARD (analog)"
            fi
        elif [[ $line =~ "usb audio" ]]; then
            USB_CARD=$card_num
            echo "  Found usb device: card$USB_CARD"
        elif [[ $NAMED && $name == *"$NAMED" ]]; then
            NAMED_CARD=$card_num
            echo "  Found named device: card$NAMED_CARD ($NAMED)"
        else
            OTHER_CARD=$card_num
            echo "  Found other device: card$OTHER_CARD"
        fi
    done < <(aplay -l | grep card)
    # If no usb card found, assume anything unknown is actually a usb card.
    USB_CARD=${USB_CARD:-$OTHER_CARD}
}

function select_sound_card()
{
    echo "  Output=$OUTPUT card=$CARD (named=$NAMED_CARD usb=$USB_CARD int=$INT_CARD)"
    case $OUTPUT in
        auto)
            [ "$USB_CARD" ] && OUTPUT=usb && return
            [ "$HDMI_CARD" ] && OUTPUT=hdmi && return
            OUTPUT=analog
            ;;
        analog)
            DTO_LINE="dtparam=audio=on"
            CARD=$INT_CARD
            ;;
        hdmi)
            DTO_LINE="dtparam=audio=on"
            CARD=$HDMI_CARD
            ;;
        usb)
            CARD=$USB_CARD
            ;;
        hifiberry_dac)
            DTO_LINE="dtoverlay=hifiberry-dac"
            CARD=$NAMED_CARD
            ;;
        hifiberry_digi)
            DTO_LINE="dtoverlay=hifiberry-digi"
            CARD=$NAMED_CARD
            ;;
        hifiberry_dacplus)
            DTO_LINE="dtoverlay=hifiberry-dacplus"
            CARD=$NAMED_CARD
            ;;
        hifiberry_amp)
            DTO_LINE="dtoverlay=hifiberry-amp"
            CARD=$NAMED_CARD
            ;;
        iqaudio_dac)
            DTO_LINE="dtoverlay=iqaudio-dacplus"
            CARD=$NAMED_CARD
            ;;
        wolfson)
            DTO_LINE="dtoverlay=wolfson"
            CARD=$NAMED_CARD
            ;;
        *)
            DTO_LINE="dtoverlay=$OUTPUT"
            CARD=$NAMED_CARD
            ;;
    esac
}

function enable_sound_card()
{
    backup_original $BOOT_CONFIG $WATERMARK
    backup_original $ASOUND_CONFIG $WATERMARK
    # Disable all audio cards.
    rm -f $ASOUND_CONFIG    
    sed -e "s/^dtparam=audio=.*/#dtparam=audio=on/" \
        -e "s/^dtoverlay=/#dtoverlay=/g" $BOOT_CONFIG > $NEW_CONFIG
    if [ "$DTO_LINE" ]
    then
        sed -i "/^#$DTO_LINE$/ s/^#//" $NEW_CONFIG
    fi
    echo "$WATERMARK" >> $NEW_CONFIG
    if cmp --silent $NEW_CONFIG $BOOT_CONFIG
    then
        # We just booted with the exact same config and didn't find the card.
        echo "Error: Failed to enable $OUTPUT soundcard"
        return 1
    else
        # Using cat ensures file permissions/flags are unchanged.
        cat $NEW_CONFIG > $BOOT_CONFIG
        rm -f $NEW_CONFIG
        set_reboot_needed
    fi
    return 0
}

echo "Setting sound configuration..."

[ -z $INI_READ ] && load_settings

BOOT_CONFIG=${BOOT_CONFIG:-/boot/config.txt}
NEW_CONFIG=${NEW_CONFIG:-/tmp/config.txt}
ASOUND_CONFIG=${ASOUND_CONFIG:-/etc/asound.conf}
VERSION=1.0
WATERMARK="##Generated by musicbox setsound v$VERSION"
OUTPUT=$(echo $INI__musicbox__output | tr "[:upper:]" "[:lower:]")
OUTPUT=${OUTPUT:-auto}

# Get alsa cards
enumerate_sound_cards
select_sound_card
# Call again to resolve automatic selection.
select_sound_card
if [ -z $CARD ]
then
    # Card not found, specify new device tree overlays and reboot to load them.
    enable_sound_card
    return
fi

echo "Using $OUTPUT card $CARD"

backup_original $ASOUND_CONFIG $WATERMARK
if [ "$OUTPUT" == "usb" -a "$INI__musicbox__downsample_usb" == "1" ]
then
    # resamples to 44K because of problems with some usb-dacs on 48k (probably related to usb drawbacks of Pi)
    # and extra buffer for usb
    cat > $ASOUND_CONFIG <<EOF
    pcm.!default {
        type plug
        slave.pcm {
            type dmix
            ipc_key 1024
            slave {
                pcm "hw:$CARD"
                rate 44100
    #            period_time 0
    #            period_size 4096
    #            buffer_size 131072
            }
        }
    }
    ctl.!default {
        type hw
        card $CARD
    }
EOF
else
    cat > $ASOUND_CONFIG <<EOF
    pcm.!default {
        type hw
        card $CARD
    }
    ctl.!default {
        type hw
        card $CARD
    }
EOF
fi
echo "$WATERMARK" >> $ASOUND_CONFIG

# Reset mixer
amixer cset numid=3 0 > /dev/null 2>&1 || true
if [ "$OUTPUT" == "analog" ]
then
    # Set mixer to analog output
    amixer cset numid=3 1 > /dev/null 2>&1 || true
elif [ "$OUTPUT" == "hdmi" ]
then
    # Set mixer to hdmi
    amixer cset numid=3 2 > /dev/null 2>&1 || true
fi

VOLUME=$(echo $INI__musicbox__initial_volume | tr -cd "[:digit:]")
if [ $VOLUME ]
then
    echo "Setting initial volume for card$CARD to $VOLUME%"
    for CTL in \
        Master \
        PCM \
        Line \
        "PCM,1" \
        Wave \
        Music \
        AC97 \
        "Master Digital" \
        DAC \
        "DAC,0" \
        "DAC,1" \
        Speaker \
        Playback \
        Digital \
        Aux \
        Front \
        Center
    do
        # Set initial hardware volume
        amixer set -c $CARD "$CTL" $VOLUME% unmute > /dev/null 2>&1 || true 
    done
fi
