#!/bin/bash
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#

#set user var
MB_USER=musicbox
MB_HOME=/home/musicbox

#import ini parser
. /opt/read_ini.sh

#convert windows ini to unix
dos2unix -n /boot/config/settings.ini /tmp/settings.ini > /dev/null 2>&1 || true

# ini vars to mopidy settings
read_ini /tmp/settings.ini MusicBox

rm /tmp/settings.ini > /dev/null 2>&1 || true

if [ "$INI__MusicBox__RESIZE_ONCE" != "" ]
then
    #comment out RESIZE_ONCE
    sed -i 's/RESIZE_ONCE/#RESIZE_ONCE/ig' /boot/config/settings.ini
    sh /opt/resizefs.sh -y
    reboot
    exit
fi


#get name of device and trim
HOSTNM=`cat /etc/hostname | tr -cd "[:alnum:]"`
#get name in ini and trim
CLEAN_NAME=$(echo $INI__MusicBox__NAME | tr -cd "[:alnum:]")
#max 9 caracters (max netbios length = 15, + '.local')
CLEAN_NAME=$(echo $CLEAN_NAME | cut -c 1-9)

if [ "$CLEAN_NAME" == "" ]
then
    CLEAN_NAME = "MusicBox"
fi

if [ "$CLEAN_NAME" != "" -a "$CLEAN_NAME" != "$HOSTNM" -a "$INI__MusicBox__NAME" == "$CLEAN_NAME" ]
then
    #if devicename is not the same as ini, change and reboot<-->
    echo "$CLEAN_NAME" > /etc/hostname
    echo "127.0.0.1       localhost $CLEAN_NAME" > /etc/hosts
    echo
    echo "MusicBox name permanently set to $CLEAN_NAME. Rebooting..."
    echo
    reboot
    exit
fi

echo
echo "MusicBox name set to $CLEAN_NAME"
echo

#check bitrate
if [ "$INI__MusicBox__SPOTIFY_BITRATE" != "320" -a "$INI__MusicBox__SPOTIFY_BITRATE" != "160" -a "$INI__MusicBox__SPOTIFY_BITRATE" != "96" ]
#if [ "$INI__MusicBox__SPOTIFY_BITRATE" = "" ]
then
     INI__MusicBox__SPOTIFY_BITRATE=160
fi

#check lastfm
ENABLE_LASTFM='true'
if [ "$INI__MusicBox__LASTFM_USERNAME" == "" -o "$INI__MusicBox__LASTFM_PASSWORD" == "" ]
then
     ENABLE_LASTFM='false'
     echo 
     echo "Disabled LastFM. Missing username and/or password..."
     echo
fi

#put settings in mopidy
rm $MB_HOME/.config/mopidy/mopidy.conf > /dev/null 2>&1 || true

 
cat >$MB_HOME/.config/mopidy/mopidy.conf <<EOF
[spotify]
username = $INI__MusicBox__SPOTIFY_USERNAME
password = $INI__MusicBox__SPOTIFY_PASSWORD
bitrate = $INI__MusicBox__SPOTIFY_BITRATE
[scrobbler]
enabled = $ENABLE_LASTFM
username = $INI__MusicBox__LASTFM_USERNAME
password = $INI__MusicBox__LASTFM_PASSWORD
[mpd]
hostname = 0.0.0.0
[local]
media_dir = /music
tag_cache_file = $MB_HOME/.cache/mopidy/tag_cache
[mpris]
enabled = false
[http]
enabled = true
hostname = 0.0.0.0
port = 6680
static_dir = /opt/defaultwebclient
[audio]
output = alsasink
mixer = alsamixer
[stream]
enabled = true
protocols =
    http
    https
    mms
    rtmp
    rtmps
    rtsp
EOF

#put wifi settings for wpa
cat >/etc/wpa.conf <<EOF
network={
        ssid="$INI__MusicBox__WIFI_NETWORK"
        psk="$INI__MusicBox__WIFI_PASSWORD"
}
EOF

#if output not defined, it will automatically detect usb, hdmi. Order: USB / HDMI / Analog  (to lowercase)
#OUTPUT=$INI__MusicBox__OUTPUT
OUTPUT=$(echo $INI__MusicBox__OUTPUT | tr "[:upper:]" "[:lower:]")

#get alsa last card (usb if inserted, otherwise analog)
STRING=`grep -e '[[:digit:]]' < /proc/asound/cards | tail -n 2`
CARD=`echo $STRING | cut -c 1`

#set output to usb if card detected and not overruled by $OUTPUT
if [ "$CARD" == "1" -a "$OUTPUT" == "" ]
then
    OUTPUT="usb"
fi

#detect hdmi
HDMI=`tvservice -s | grep HDMI`

#set output to hdmi if not defined
if [ "$HDMI" != "" -a "$OUTPUT" == "" ]
then
    OUTPUT="hdmi"
fi

#set output if not hdmi/usb
if [ "$OUTPUT" == "" ]
then
    OUTPUT="analog"
fi

echo 
echo "Line out set to $OUTPUT"
echo

#change lastcard to analog if set in settings
if [ "$OUTPUT" == "analog" -o "$OUTPUT" == "hdmi" ]
then
    CARD=0
fi

# set default soundcard in Alsa to the last card (analog or usb)
cat << EOF > /etc/asound.conf
pcm.!default {
  type hw
  card $CARD
}
ctl.!default {
   type hw
   card $CARD
}
EOF

#rm /opt/mopidy/settings.py > /dev/null 2>&1 || true
#rm /opt/mopidy/settings.pyc > /dev/null 2>&1 || true

#if [ "$OUTPUT" == "analog" ]
#then
    # for analog use pulse to avoid noises
#    pulseaudio --system > /dev/null 2>&1 &
#    ln -s /opt/settingspulse.py /opt/mopidy/settings.py
#else
    # usb or hdmi, use alsa
#    ln -s /opt/settingsalsa.py /opt/mopidy/settings.py
#fi

#reset mixer
amixer cset numid=3 0 > /dev/null 2>&1 || true

#set mixer to analog output
if [ "$OUTPUT" == "analog" ]
then
    amixer cset numid=3 1 > /dev/null 2>&1 || true
fi

#set mixer to hdmi
if [ "$OUTPUT" == "hdmi" ]
then
    amixer cset numid=3 2 > /dev/null 2>&1 || true
fi

for CTL in \
        Master \
        PCM \
        Line \
        "PCM,1" \
        Wave \
        Music \
        AC97 \
        "Master Digital" \
        DAC \
        "DAC,0" \
        "DAC,1" \
        Speaker \
        Playback \
	Digital \
	Aux \
	Front \
	Center
do
        amixer set "$CTL" 75% unmute > /dev/null 2>&1 || true
done

#set PCM of Pi higher, because it's really quit otherwise (hardware thing)
amixer -c 0 -- sset PCM playback 90% > /dev/null 2>&1 || true

#check networking, sleep for a while
MYIP=$(hostname -I)
while [ "$MYIP" == "" -a "$INI__MusicBox__WAIT_FOR_NETWORK" != "false" ]
do
    echo "Waiting for network..."
    echo
    sleep 5
    MYIP=$(hostname -I)
done

# set date/time
ntpdate ntp.ubuntu.com

#start shairport in the background
if [ "$OUTPUT" == "usb" ]
then
    #start shairport for usb (alsa device 1,0)
    su $MB_USER -c "/opt/shairport/shairport.pl -d -a $HOSTNM --ao_driver alsa --ao_devicename \"hw:1,0\" --play_prog=\"ncmpcpp stop \"" > /dev/null 2>&1 &
else
    #start shairport normally
#    /opt/shairport/shairport.pl -d -a MusicBox > /dev/null 2>&1 &
    su $MB_USER -c "/opt/shairport/shairport.pl -d -a $HOSTNM --play_prog=\"ncmpcpp stop \"" > /dev/null 2>&1 &
fi

#redirect 6680 to 80
iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 6680 > /dev/null 2>&1 || true

#mount windows share
if [ "$INI__MusicBox__NETWORK_MOUNT_ADDRESS" != "" ]
then
    #mount samba share, readonly
#    mount -t cifs -o ro,user=$INI__MusicBox__NETWORK_MOUNT_USER,password=$INI__MusicBox__NETWORK_MOUNT_PASSWORD $INI__MusicBox__NETWORK_MOUNT_ADDRESS /music/network/ > /dev/null 2>&1 || true
#    echo "mount -t cifs -o ro,user=$INI__MusicBox__NETWORK_MOUNT_USER,password=$INI__MusicBox__NETWORK_MOUNT_PASSWORD $INI__MusicBox__NETWORK_MOUNT_ADDRESS /music/network/"
    echo
    echo "Mounting Windows Network drive..."
    echo
    mount -t cifs -o ro,user=$INI__MusicBox__NETWORK_MOUNT_USER,password=$INI__MusicBox__NETWORK_MOUNT_PASSWORD $INI__MusicBox__NETWORK_MOUNT_ADDRESS /music/network/
#fstype=cifs,file_mode=0777,dir_mode=0777,iocharset=utf8,sec=ntlm,rsize=2048,wsize=4096,cache=strict
#rsize=4096,cache=none
fi

# scan local music files once (by setting the ini value)
if [ "$INI__MusicBox__SCAN_ONCE" == "true" ]
then
    #comment out SCAN_ONCE
    sed -i 's/SCAN_ONCE/#SCAN_ONCE/ig' /boot/config/settings.ini
fi

# scan local music files if setting is true
if [ "$INI__MusicBox__SCAN_ALWAYS" == "true" -o "$INI__MusicBox__SCAN_ONCE" == "true" ]
then
    echo
    echo "Scanning music-files, please wait.... The scanned files will be displayed. You can ignore warnings about non-music files."
    echo
    rm $MB_HOME/.cache/mopidy/tag_cache > /dev/null 2>&1 || true
    mkdir -p $MB_HOME/.cache/mopidy
    mopidy-scan -v /music/ > $MB_HOME/.cache/mopidy/tag_cache
fi

# Print the IP address
_IP=$(hostname -I) || true
if [ "$_IP" ]; then
    echo
    printf "My IP address is %s\n" "$_IP"
    echo
    echo "Now the output of Mopidy (the musicserver) appears. Nothing to worry about (it's shown for if something's wrong), you can login if you want (the output of Mopidy could continue)."
    echo
fi

if [ "$INI__MusicBox__NAME" != "$CLEAN_NAME" ]
then
    echo "Your custom hostname $INI__MusicBox__NAME is not ok! It should be max. 9 alphanumerical caracters."
fi

#start mopidy in the background, under the user musixbox
#nice value of 5 (lower prio!) makes the music stutter less. Strange but true
#log output to a file
#nice -n5 su $MB_USER -c mopidy 2>&1 | tee /var/log/mopidy.log & 
/opt/startmopidy.sh || true

exit 0
